stages:
  - compile
  - test
  - run

.PrepareSBT:
  image: ubuntu:20.04
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - apt-get -y install curl gnupg openjdk-16-jdk
    - echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" > /etc/apt/sources.list.d/sbt.list
    - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" > /etc/apt/sources.list.d/sbt_old.list
    - curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | apt-key add
    - apt-get -y update
    - apt-get -y install sbt

Compile:
  extends: .PrepareSBT
  stage: compile
  needs: []
  script:
    - sbt compile

Test:
  extends: .PrepareSBT
  stage: test
  needs:
    - Compile
  script:
    - sbt test

Run:
  extends: .PrepareSBT
  stage: test
  needs:
    - Compile
  script:
    - sbt run

# The following ones use a prepared docker image. They run somewhat faster, but not all that much.
# I'll decide later whether to drop one of the ways to install sbt, or keep them both (for some
# variety in how the build is done, and potentially more cross-compatibility.)
Compile:UseSbtDocker:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: compile
  needs: []
  script:
    - sbt compile

Test:UseSbtDocker:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: test
  needs:
    - Compile:UseSbtDocker
  script:
    - sbt test

Run:UseSbtDocker:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: test
  needs:
    - Compile:UseSbtDocker
  script:
    - sbt run

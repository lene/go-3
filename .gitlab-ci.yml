stages:
  - test
  - build
  - test built
  - package
  - release

variables:
  TEST_RUN_BOARD_SIZE: 11
  TEST_RUN_MAX_RUNNING_TIME: 60
  DEPLOYABLE_BASE_NAME: go-3d
  DEPLOYABLE_VERSION: 0.7.4
  SBT_IMAGE: hseeberger/scala-sbt:17.0.2_1.6.2_3.1.1
  DOCKER_IMAGE: registry.gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/server

default:
  retry: 2

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

# This job installs sbt by itself. It is somewhat slower than the ones based on scala-sbt below.
# I leave it in mostly for documentation how to install the environment.
Test:Debian:
  parallel:
    matrix:
      - IMAGE:
        - ubuntu:20.04
        - ubuntu:22.04
        - ubuntu:latest
        - debian:stable-slim
        - debian:unstable-slim
        - debian:testing-slim
  image: $IMAGE
  stage: test
  needs: []
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - apt-get -y install curl gnupg openjdk-17-jdk
    - echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" > /etc/apt/sources.list.d/sbt.list
    - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" > /etc/apt/sources.list.d/sbt_old.list
    - curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | apt-key add
    - apt-get -y update
    - apt-get -y install sbt
  script:
    - sbt test

# The following ones use a prepared docker image for sbt.
Test:SbtImage:
  image: $SBT_IMAGE
  stage: test
  needs: []
  script:
    - sbt test
  artifacts:
    when: always
    reports:
      junit: target/test-reports/**/TEST-*.xml

Run:UseSbtDocker:
  image: $SBT_IMAGE
  stage: test
  needs: []
  script:
    - sbt "runMain go3d.Runner"

CheckRunTime:
  image: $SBT_IMAGE
  stage: test
  needs: []
  before_script:
    - apt-get -y update
    - apt-get -y install bc time
  script:
    - sbt compile
    - /usr/bin/time -f %U -o runtime.log sbt "runMain go3d.Runner $TEST_RUN_BOARD_SIZE"
    - echo "$(<runtime.log) > $TEST_RUN_MAX_RUNNING_TIME"
    - if [ $(echo "$(<runtime.log) > $TEST_RUN_MAX_RUNNING_TIME" | bc -l) -eq 1 ]; then exit 1; fi
  artifacts:
    paths:
      - runtime.log

TagIsNewAndConsistent:
  stage: test
  image: alpine:latest
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
    - if: $CI_COMMIT_BRANCH == "master"
  before_script:
    - apk update
    - apk add git
  script:
    - VERSION_SBT=$(egrep 'version := ".*"' build.sbt | cut -d \" -f 2)
    - test -n "$VERSION_SBT"
    - VERSION_RUN_TEST=$(egrep '^VERSION=.*' run-test-game.sh | cut -d = -f 2)
    - test -n "$VERSION_RUN_TEST"
    - test "$VERSION_SBT" = "$VERSION_RUN_TEST"
    - VERSIONS_DOCKERFILE=$(egrep 'ARG version=.*' Dockerfile | cut -d = -f 2)
    - test -n "$VERSIONS_DOCKERFILE"
    - test $(echo $VERSIONS_DOCKERFILE | wc -w) -eq 2
    - VERSIONS_DOCKERFILE_1=$(egrep 'ARG version=.*' Dockerfile | cut -d = -f 2 | head -n 1)
    - VERSIONS_DOCKERFILE_2=$(egrep 'ARG version=.*' Dockerfile | cut -d = -f 2 | tail -n 1)
    - test "$VERSIONS_DOCKERFILE_1" = "$VERSIONS_DOCKERFILE_2"
    - test "$VERSION_SBT" = "$VERSIONS_DOCKERFILE_1"
    - VERSIONS_CI=$(egrep 'DEPLOYABLE_VERSION.*' .gitlab-ci.yml | head -n 1 | cut -d ':' -f 2 | xargs)
    - test "$VERSION_SBT" = "$VERSIONS_CI"
    - git tag | ( ! grep "^${VERSION_SBT}\$" )

ChangelogIsUpdated:
  stage: test
  image: alpine:latest
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
    - if: $CI_COMMIT_BRANCH == "master"
  script:
    - test -f CHANGELOG.md || exit 0
    - VERSION=$(egrep 'version := ".*"' build.sbt | cut -d \" -f 2)
    - test -n "$VERSION"
    - fgrep "## [$VERSION]" CHANGELOG.md
    - fgrep "...$VERSION" CHANGELOG.md
    - echo $CI_MERGE_REQUEST_TITLE | grep '^Draft:\|^WIP:' ||
      fgrep "## [$VERSION] - $(date +%Y-%m-%d)" CHANGELOG.md

BuildDeployable:
  image: $SBT_IMAGE
  stage: build
  needs: []
  script:
    - sbt "Universal / packageBin"
    - mv target/universal/${DEPLOYABLE_BASE_NAME}-${DEPLOYABLE_VERSION}.zip .
  artifacts:
    paths:
      - go-3d-*.*.*.zip

BuildDockerImage:
  image: docker:19.03.13
  stage: build
  needs: []
  services:
    - docker:19.03.13-dind
  script:
    - VERSION=$(grep 'version :=' build.sbt | cut -d '"' -f 2)
    - TAG=${VERSION}-${CI_COMMIT_SHORT_SHA}
    - docker build --build-arg version=${VERSION} -t ${DOCKER_IMAGE}:${TAG} .
    - test -n "$CI_COMMIT_TAG" && docker tag ${DOCKER_IMAGE}:${TAG} ${DOCKER_IMAGE}:$CI_COMMIT_TAG
    - docker tag ${DOCKER_IMAGE}:${TAG} ${DOCKER_IMAGE}:latest
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} registry.gitlab.com
    - docker push ${DOCKER_IMAGE}

container_scanning:
  stage: build
  needs:
    - BuildDockerImage
  variables:
    CS_IMAGE: ${DOCKER_IMAGE}:latest

.TestGameplay:
  stage: test built
  variables:
    BOARD_SIZE: 7
  timeout: 1 hour
  script:
    - mkdir -p saves
    - ${INSTALL_DIR}/bin/runner --server --port 6030 --save-dir saves 2>&1 > server.log &
    - sleep 5
    - GAME_ID=""
    - while [ "$GAME_ID" != "null" ]; do GAME_ID=$(curl -s http://localhost:6030/openGames | jq -r .ids[0]); echo $GAME_ID; sleep 1; done
    - grep -A1 "Server started on" server.log
    - echo ${STRATEGY_BLACK:-random} - ${STRATEGY_WHITE:-random}
    - ${INSTALL_DIR}/bin/bot-client --server localhost --port 6030 --size $BOARD_SIZE --color b --strategy ${STRATEGY_BLACK:-random} | grep 'Map(' &
    - while [ "$GAME_ID" == "null" ]; do GAME_ID=$(curl -s http://localhost:6030/openGames | jq -r .ids[0]); echo $GAME_ID; sleep 1; done
    - /usr/bin/time -o time.log -f "%e\n%U\n%M\n%P" ${INSTALL_DIR}/bin/bot-client --server localhost --port 6030 --game-id $GAME_ID --color w --strategy ${STRATEGY_WHITE:-random} | tail -n 1 > white.log
    - grep -c "go3d.server.SetServlet" server.log
    - grep -c "go3d.server.PassServlet" server.log || true
    - cat white.log
    - SCORE_BLACK=$(cat white.log | grep -E -o "[0-9]+" | head -n 1)
    - SCORE_WHITE=$(cat white.log | grep -E -o "[0-9]+" | tail -n 1)
    - WALL_TIME_WHITE=$(sed '1q;d' time.log)
    - USER_TIME_WHITE=$(sed '2q;d' time.log)
    - MEM_WHITE=$(sed '3q;d' time.log)
    - CPU_PERCENT_WHITE=$(sed '4q;d' time.log)
    - echo "${STRATEGY_BLACK:-random};${STRATEGY_WHITE:-random};$SCORE_BLACK;$SCORE_WHITE;$WALL_TIME_WHITE;$USER_TIME_WHITE;$MEM_WHITE;$CPU_PERCENT_WHITE" >> results.${STRATEGY_BLACK:-random}.${STRATEGY_WHITE:-random}.csv
  artifacts:
    when: always
    paths:
      - server.log
      - white.log
      - results.*.*.csv

.TestDeployable:
  extends: .TestGameplay
  needs:
    - job: BuildDeployable
      artifacts: true
  variables:
    INSTALL_DIR: ./${DEPLOYABLE_BASE_NAME}-${DEPLOYABLE_VERSION}
  before_script:
    - apt-get -y update && apt-get -y upgrade && apt-get -y install jq curl time || true
    - microdnf install --nodocs unzip jq time && microdnf clean all || true
    - test -f ${DEPLOYABLE_BASE_NAME}-${DEPLOYABLE_VERSION}.zip
    - unzip -q ${DEPLOYABLE_BASE_NAME}-${DEPLOYABLE_VERSION}.zip

TestDeployable:
  extends: .TestDeployable
  parallel:
    matrix:
      - IMAGE: [$SBT_IMAGE, openjdk:11-jre, openjdk:16, openjdk:17, openjdk:18, openjdk:19, openjdk:20]
        STRATEGY_BLACK: [random]
        STRATEGY_WHITE: [random]
  image: $IMAGE

TestDockerImage:
  extends: .TestGameplay
  parallel:
    matrix:
      - STRATEGY_BLACK:
          - onStarPoints,minimizeOpponentLiberties
          - onStarPoints,maximizeOwnLiberties
        STRATEGY_WHITE:
          - closestToStarPoints
          - maximizeDistance
  image:
    name: ${DOCKER_IMAGE}:latest
    entrypoint: [""]
  needs:
    - job: BuildDockerImage
      artifacts: false
  variables:
    INSTALL_DIR: /go-3

CollectResults:
  stage: package
  needs:
    - TestDockerImage
  script:
    - ls -l results.*.*.csv
    - cat results.*.*.csv >> results.all.csv
  artifacts:
    name: all-artifacts
    paths:
      - results.all.csv

CreateTag:
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
  needs:
    - TagIsNewAndConsistent
  before_script:
    - apk update
    - apk add git
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - VERSION_SBT=$(egrep 'version := ".*"' build.sbt | cut -d \" -f 2)
    - echo "**** Tagging release as version $VERSION_SBT"
    - git remote add tag-origin https://oauth2:${GITLAB_ACCESS_TOKEN}@gitlab.com/${CI_PROJECT_PATH}
    - git tag -a "${VERSION_SBT}" -m "Released $(date +%Y-%m-%d)"
    - git push tag-origin "${VERSION_SBT}"

Upload:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: BuildDeployable
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apk update
    - apk add curl
  script:
    - export DEPLOYABLE_ZIP_FILE=${DEPLOYABLE_BASE_NAME}-${DEPLOYABLE_VERSION}.zip
    - echo curl --header "JOB-TOKEN $CI_JOB_TOKEN" --upload-file ${DEPLOYABLE_ZIP_FILE} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${DEPLOYABLE_ZIP_FILE}"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOYABLE_ZIP_FILE} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${DEPLOYABLE_ZIP_FILE}"'

PushToGithub:
  stage: release
  image: alpine:latest
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  before_script:
    - apk update
    - apk add openssh-client git sshpass
    - eval $(ssh-agent -s)
    - echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -T git@github.com 2>&1 || true
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - git remote add github git@github.com:lene/DuplicateImages.git
    - git remote show github
    - BRANCH=${CI_COMMIT_BRANCH:-master}
    - git checkout $BRANCH
    - git push github $BRANCH
    - git push github $CI_COMMIT_TAG

CreateGithubRelease:
  stage: release
  needs:
    - PushToGithub
  image: alpine:latest
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  before_script:
    - apk update
    - apk add curl
  variables:
    RELEASE_API_URL: "https://api.github.com/repos/lene/DuplicateImages/releases"
    DESCRIPTION: "Full Changelog: https://github.com/lene/DuplicateImages/blob/${CI_COMMIT_TAG}/CHANGELOG.md"
  script:
    - POST_DATA='{
      "tag_name":"'${CI_COMMIT_TAG}'",
      "target_commitish":"master",
      "name":"'${CI_COMMIT_TAG}'",
      "body":"'${FULL_DESCRIPTION}${DESCRIPTION}'",
      "draft":false,
      "prerelease":false,
      "generate_release_notes":false
      }'
    - echo $API_URL
    - echo $POST_DATA
    - 'curl -L -X POST 
         -H "Accept: application/vnd.github+json" 
         -H "X-GitHub-Api-Version: 2022-11-28" 
         -H "Authorization: Bearer ${GITHUB_API_TOKEN}"
         ${RELEASE_API_URL} -d "${POST_DATA}"'

CreateGitlabRelease:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: BuildDeployable
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'running release_job'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created using the release-cli'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'

stages:
  - test
  - build
  - run
  - release

variables:
  TEST_RUN_BOARD_SIZE: 11
  TEST_RUN_MAX_RUNNING_TIME: 60
  DEPLOYABLE_BASE_NAME: go-3d-0.6.1

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

# This job installs sbt by itself. It is somewhat slower than the ones based on scala-sbt below.
# I leave it in mostly for documentation how to install the environment.
Test:BuildSbt:
  image: ubuntu:20.04
  stage: test
  needs: []
  before_script:
    - apt-get -y update
    - apt-get -y upgrade
    - apt-get -y install curl gnupg openjdk-16-jdk
    - echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" > /etc/apt/sources.list.d/sbt.list
    - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" > /etc/apt/sources.list.d/sbt_old.list
    - curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | apt-key add
    - apt-get -y update
    - apt-get -y install sbt
  script:
    - sbt test

# The following ones use a prepared docker image for sbt.
Test:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: test
  needs: []
  script:
    - sbt test
  artifacts:
    when: always
    reports:
      junit: target/test-reports/**/TEST-*.xml

Run:UseSbtDocker:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: test
  needs: []
  script:
    - sbt "runMain go3d.Runner"

CheckRunTime:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: test
  needs: []
  before_script:
    - apt-get -y update
    - apt-get -y install bc time
  script:
    - sbt compile
    - /usr/bin/time -f %U -o runtime.log sbt "runMain go3d.Runner $TEST_RUN_BOARD_SIZE"
    - echo "$(<runtime.log) > $TEST_RUN_MAX_RUNNING_TIME"
    - if [ $(echo "$(<runtime.log) > $TEST_RUN_MAX_RUNNING_TIME" | bc -l) -eq 1 ]; then exit 1; fi
  artifacts:
    paths:
      - runtime.log

BuildDeployable:
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1
  stage: build
  needs: []
  script:
    - sbt universal:packageBin
    - mv target/universal/${DEPLOYABLE_BASE_NAME}.zip .
  artifacts:
    paths:
      - go-3d-0.6.1.zip

.TestDeployable:
  stage: run
  needs:
    - job: BuildDeployable
      artifacts: true
  script:
    - test -f ${DEPLOYABLE_BASE_NAME}.zip
    - unzip ${DEPLOYABLE_BASE_NAME}.zip
    - ./${DEPLOYABLE_BASE_NAME}/bin/runner --benchmark 9

TestDeployable:ScalaSBT:
  extends: .TestDeployable
  image: hseeberger/scala-sbt:8u222_1.3.5_2.13.1

TestDeployable:OpenJDK:8:JRE:
  extends: .TestDeployable
  image: openjdk:8-jre

TestDeployable:OpenJDK:11:JRE:
  extends: .TestDeployable
  image: openjdk:11-jre

TestDeployable:OpenJDK:16:JRE:
  extends: .TestDeployable
  image: openjdk:16
  before_script:
    - microdnf install --nodocs unzip && microdnf clean all

TestDeployable:OpenJDK:17:JRE:
  extends: .TestDeployable
  image: openjdk:17
  before_script:
    - microdnf install --nodocs unzip && microdnf clean all

Upload:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: BuildDeployable
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apk update
    - apk add curl
  script:
    - export DEPLOYABLE_TAR_FILE=${DEPLOYABLE_BASE_NAME}.zip
    - echo curl --header "JOB-TOKEN $CI_JOB_TOKEN" --upload-file ${DEPLOYABLE_TAR_FILE} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${DEPLOYABLE_TAR_FILE}"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOYABLE_TAR_FILE} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${DEPLOYABLE_TAR_FILE}"'

Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: BuildDeployable
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'running release_job'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Created using the release-cli'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    assets: # Optional, multiple asset links
      links:
        - name: 'asset2'
          url: 'https://example.com/assets/2'
          filepath: '/pretty/url/1' # optional
          link_type: 'other' # optional